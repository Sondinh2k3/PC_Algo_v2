import time
import os
import sys
import logging

# Th√™m project root v√†o sys.path ƒë·ªÉ c√≥ th·ªÉ import t·ª´ src
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(PROJECT_ROOT)

from src.algorithm.algo import PerimeterController, N_HAT, CONTROL_INTERVAL_S

def run_perimeter_control_mock_test():
    print("üö¶ B·∫ÆT ƒê·∫¶U M√î PH·ªéNG TH·ª¨ NGHI·ªÜM (MOCK TEST)")
    print("="*70)
    
    try:
        # Ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n, n√™n ƒë∆∞·ªùng d·∫´n t·ªõi config c·∫ßn l√† "src/...."
        controller = PerimeterController(config_file="src/config/intersection_config.json")
    except Exception as e:
        print(f"\n[L·ªñI] Kh√¥ng th·ªÉ kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn: {e}")
        print("Vui l√≤ng ki·ªÉm tra file 'src/config/intersection_config.json' v√† ƒë·∫£m b·∫£o b·∫°n ƒëang ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.")
        return
    
    simulation_data = [
        {'step': 1, 'n_k': 80, 'description': 'Giao th√¥ng b√¨nh th∆∞·ªùng'},
        {'step': 2, 'n_k': 90, 'description': 'L∆∞u l∆∞·ª£ng tƒÉng, g·∫ßn ng∆∞·ª°ng'},
        {'step': 3, 'n_k': 100, 'description': 'V∆∞·ª£t ng∆∞·ª°ng - K√≠ch ho·∫°t'},
        {'step': 4, 'n_k': 110, 'description': 'T·∫Øc ngh·∫Ωn'},
        {'step': 5, 'n_k': 105, 'description': 'B·∫Øt ƒë·∫ßu c·∫£i thi·ªán'},
        {'step': 6, 'n_k': 95, 'description': 'Ti·∫øp t·ª•c gi·∫£m'},
        {'step': 7, 'n_k': 80, 'description': 'D∆∞·ªõi ng∆∞·ª°ng - H·ªßy k√≠ch ho·∫°t'},
        {'step': 8, 'n_k': 75, 'description': 'Tr·ªü l·∫°i b√¨nh th∆∞·ªùng'},
    ]
    
    n_previous = 80.0
    qg_previous = 250.0
    
    print(f"\n TH√îNG TIN M√î PH·ªéNG:")
    print(f"   ‚Ä¢ Ng∆∞·ª°ng m·ª•c ti√™u nÃÇ: {N_HAT} xe")
    print(f"   ‚Ä¢ Kho·∫£ng ƒëi·ªÅu khi·ªÉn: {CONTROL_INTERVAL_S}s")
    print(f"   ‚Ä¢ S·ªë b∆∞·ªõc m√¥ ph·ªèng: {len(simulation_data)} b∆∞·ªõc")
    print("\n" + "="*70)
    
    for data in simulation_data:
        step = data['step']
        n_current = data['n_k']
        description = data['description']
        
        print(f"\n CHU K·ª≤ {step}: {description}")
        
        result = controller.run_simulation_step(
            n_current, n_previous, qg_previous
        )
        
        n_previous = result.n_current
        qg_previous = result.qg_new
        
        time.sleep(0.5)
    
    print(" K·∫æT TH√öC M√î PH·ªéNG TH·ª¨ NGHI·ªÜM")
    print("="*70)

if __name__ == '__main__':
    run_perimeter_control_mock_test()
