"""
Intersection Analyzer - Ph√¢n t√≠ch v√† ƒë·ªçc th√¥ng tin n√∫t giao t·ª´ SUMO
T·ª± ƒë·ªông ph√°t hi·ªán c√°c n√∫t giao, pha ƒë√®n v√† th√¥ng s·ªë li√™n quan
"""

import traci
import json
import xml.etree.ElementTree as ET
from typing import Dict, List, Tuple, Optional
import os
import logging

class IntersectionAnalyzer:
    """
    Ph√¢n t√≠ch th√¥ng tin n√∫t giao t·ª´ SUMO network v√† simulation
    """
    
    def __init__(self, net_file_path: str):
        """
        Kh·ªüi t·∫°o analyzer
        
        Args:
            net_file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file .net.xml
        """
        self.net_file_path = net_file_path
        self.intersections = {}
        self.traffic_lights = {}
        
    def analyze_network(self) -> Dict:
        """
        Ph√¢n t√≠ch file network ƒë·ªÉ l·∫•y th√¥ng tin n√∫t giao
        """
        print("üîç ƒêang ph√¢n t√≠ch file network...")
        
        try:
            tree = ET.parse(self.net_file_path)
            root = tree.getroot()
            
            # T√¨m t·∫•t c·∫£ traffic lights
            for tl_logic in root.findall('.//tlLogic'):
                tl_id = tl_logic.get('id')
                tl_type = tl_logic.get('type', 'static')
                
                phases = []
                for phase in tl_logic.findall('phase'):
                    duration = int(phase.get('duration', 0))
                    state = phase.get('state', '')
                    phases.append({
                        'duration': duration,
                        'state': state
                    })
                
                self.traffic_lights[tl_id] = {
                    'type': tl_type,
                    'phases': phases,
                    'total_cycle': sum(p['duration'] for p in phases)
                }
            
            # T√¨m c√°c junction c√≥ traffic light
            for junction in root.findall('.//junction'):
                junction_id = junction.get('id')
                junction_type = junction.get('type')
                
                # Ch·ªâ quan t√¢m ƒë·∫øn junction c√≥ traffic light
                if junction_type in ['traffic_light', 'traffic_light_right_on_red']:
                    self.intersections[junction_id] = {
                        'id': junction_id,
                        'type': junction_type,
                        'x': float(junction.get('x', 0)),
                        'y': float(junction.get('y', 0)),
                        'incoming_lanes': [],
                        'outgoing_lanes': [],
                        'internal_lanes': []
                    }
            
            print(f"‚úÖ T√¨m th·∫•y {len(self.traffic_lights)} traffic lights v√† {len(self.intersections)} intersections")
            return self.intersections
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√¢n t√≠ch network: {e}")
            return {}
    
    def analyze_from_simulation(self) -> Dict:
        """
        Ph√¢n t√≠ch t·ª´ simulation ƒëang ch·∫°y (TraCI)
        """
        print("üîç ƒêang ph√¢n t√≠ch t·ª´ simulation...")
        
        try:
            # L·∫•y danh s√°ch traffic light IDs
            tl_ids = traci.trafficlight.getIDList()
            
            intersection_data = {}
            
            for tl_id in tl_ids:
                print(f"  Ph√¢n t√≠ch traffic light: {tl_id}")
                
                # L·∫•y th√¥ng tin c∆° b·∫£n
                program_id = traci.trafficlight.getProgram(tl_id)
                phase_count = traci.trafficlight.getPhaseNumber(tl_id)
                current_phase = traci.trafficlight.getPhase(tl_id)
                
                # L·∫•y th√¥ng tin c√°c pha
                phases = []
                for i in range(phase_count):
                    duration = traci.trafficlight.getPhaseDuration(tl_id, i)
                    state = traci.trafficlight.getRedYellowGreenState(tl_id, i)
                    phases.append({
                        'index': i,
                        'duration': duration,
                        'state': state
                    })
                
                # L·∫•y controlled lanes
                controlled_lanes = traci.trafficlight.getControlledLanes(tl_id)
                
                # Ph√¢n t√≠ch c√°c pha ch√≠nh v√† ph·ª•
                main_phases, secondary_phases = self._classify_phases(phases, controlled_lanes)
                
                intersection_data[tl_id] = {
                    'id': tl_id,
                    'program_id': program_id,
                    'total_phases': phase_count,
                    'current_phase': current_phase,
                    'controlled_lanes': controlled_lanes,
                    'phases': phases,
                    'main_phases': main_phases,
                    'secondary_phases': secondary_phases,
                    'cycle_length': sum(p['duration'] for p in phases),
                    'estimated_capacity': self._estimate_capacity(controlled_lanes)
                }
            
            return intersection_data
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√¢n t√≠ch t·ª´ simulation: {e}")
            return {}
    
    def _classify_phases(self, phases: List[Dict], controlled_lanes: List[str]) -> Tuple[List[int], List[int]]:
        """
        Ph√¢n lo·∫°i pha ch√≠nh v√† ph·ª• d·ª±a tr√™n s·ªë l∆∞·ª£ng lane ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn
        """
        main_phases = []
        secondary_phases = []
        
        for i, phase in enumerate(phases):
            # ƒê·∫øm s·ªë lane c√≥ ƒë√®n xanh trong pha n√†y
            green_lanes = sum(1 for char in phase['state'] if char == 'G')
            
            if green_lanes >= 2:  # Pha ch√≠nh c√≥ √≠t nh·∫•t 2 lane xanh
                main_phases.append(i)
            else:
                secondary_phases.append(i)
        
        return main_phases, secondary_phases
    
    def _estimate_capacity(self, controlled_lanes: List[str]) -> Dict:
        """
        ∆Ø·ªõc t√≠nh capacity cho c√°c lane ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn
        """
        capacity_data = {}
        
        for lane_id in controlled_lanes:
            try:
                # L·∫•y th√¥ng tin lane
                max_speed = traci.lane.getMaxSpeed(lane_id)
                length = traci.lane.getLength(lane_id)
                
                # ∆Ø·ªõc t√≠nh saturation flow (xe/gi·ªù)
                # Gi·∫£ s·ª≠ kho·∫£ng c√°ch trung b√¨nh gi·ªØa c√°c xe l√† 7.5m
                avg_vehicle_gap = 7.5  # meters
                saturation_flow = (3600 * max_speed) / (avg_vehicle_gap + 5)  # 5m l√† chi·ªÅu d√†i xe trung b√¨nh
                
                capacity_data[lane_id] = {
                    'max_speed': max_speed,
                    'length': length,
                    'estimated_saturation_flow': saturation_flow,
                    'estimated_saturation_flow_per_second': saturation_flow / 3600
                }
                
            except traci.TraCIException:
                # Lane kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p
                capacity_data[lane_id] = {
                    'max_speed': 13.89,  # 50 km/h m·∫∑c ƒë·ªãnh
                    'length': 100,
                    'estimated_saturation_flow': 1800,  # xe/gi·ªù m·∫∑c ƒë·ªãnh
                    'estimated_saturation_flow_per_second': 0.5
                }
        
        return capacity_data
    
    def generate_intersection_config(self, output_file: str = "intersection_config.json"):
        """
        T·∫°o file c·∫•u h√¨nh JSON cho c√°c n√∫t giao
        """
        print("üìù ƒêang t·∫°o file c·∫•u h√¨nh intersection...")
        
        # Ph√¢n t√≠ch t·ª´ network tr∆∞·ªõc
        network_data = self.analyze_network()
        
        # N·∫øu c√≥ simulation ƒëang ch·∫°y, l·∫•y th√™m d·ªØ li·ªáu
        simulation_data = {}
        try:
            simulation_data = self.analyze_from_simulation()
        except:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi simulation, ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu network")
        
        # K·∫øt h·ª£p d·ªØ li·ªáu
        combined_data = {
            'metadata': {
                'network_file': self.net_file_path,
                'generated_at': str(traci.simulation.getTime()) if 'traci' in globals() else 'unknown',
                'total_intersections': len(network_data),
                'total_traffic_lights': len(self.traffic_lights)
            },
            'traffic_lights': self.traffic_lights,
            'intersections': network_data,
            'simulation_data': simulation_data,
            'optimization_parameters': self._generate_optimization_params(network_data, simulation_data)
        }
        
        # L∆∞u v√†o file JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(combined_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ t·∫°o file c·∫•u h√¨nh: {output_file}")
        return combined_data
    
    def _generate_optimization_params(self, network_data: Dict, simulation_data: Dict) -> Dict:
        """
        T·∫°o tham s·ªë cho b√†i to√°n t·ªëi ∆∞u h√≥a
        """
        optimization_params = {
            'intersection_ids': list(network_data.keys()),
            'theta_1': 1.0,  # Tr·ªçng s·ªë ƒë·ªô l·ªách
            'theta_2': 0.5,  # Tr·ªçng s·ªë capacity
            'default_cycle_length': 90,  # Chu k·ª≥ m·∫∑c ƒë·ªãnh (gi√¢y)
            'min_green_time': 15,  # Th·ªùi gian xanh t·ªëi thi·ªÉu
            'max_green_time': 75,  # Th·ªùi gian xanh t·ªëi ƒëa
            'max_change': 5,  # Thay ƒë·ªïi t·ªëi ƒëa gi·ªØa c√°c chu k·ª≥
            'intersection_data': {}
        }
        
        # T·∫°o d·ªØ li·ªáu cho t·ª´ng intersection
        for intersection_id in network_data.keys():
            tl_data = self.traffic_lights.get(intersection_id, {})
            sim_data = simulation_data.get(intersection_id, {})
            
            # L·∫•y th√¥ng tin pha
            phases = tl_data.get('phases', [])
            if not phases and sim_data:
                phases = sim_data.get('phases', [])
            
            # Ph√¢n lo·∫°i pha ch√≠nh/ph·ª•
            main_phases = []
            secondary_phases = []
            if sim_data:
                main_phases = sim_data.get('main_phases', [])
                secondary_phases = sim_data.get('secondary_phases', [])
            else:
                # Ph√¢n lo·∫°i d·ª±a tr√™n network data
                for i, phase in enumerate(phases):
                    if len(phase.get('state', '')) >= 2:
                        main_phases.append(i)
                    else:
                        secondary_phases.append(i)
            
            # ∆Ø·ªõc t√≠nh saturation flow
            saturation_flows = {}
            if sim_data and 'estimated_capacity' in sim_data:
                for lane_id, capacity in sim_data['estimated_capacity'].items():
                    saturation_flows[lane_id] = capacity['estimated_saturation_flow_per_second']
            
            # T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
            if not saturation_flows:
                saturation_flows = {
                    'main': 0.45,  # xe/gi√¢y-xanh
                    'secondary': 0.35
                }
            
            optimization_params['intersection_data'][intersection_id] = {
                'cycle_length': tl_data.get('total_cycle', 90),
                'main_phases': main_phases,
                'secondary_phases': secondary_phases,
                'saturation_flows': saturation_flows,
                'turn_in_ratios': {
                    'main': 0.7,  # T·ª∑ l·ªá r·∫Ω v√†o m·∫∑c ƒë·ªãnh
                    'secondary': 0.5
                },
                'queue_lengths': {
                    'main': 15,  # H√†ng ƒë·ª£i m·∫∑c ƒë·ªãnh (xe)
                    'secondary': 8
                }
            }
        
        return optimization_params


def analyze_phuquoc_network():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ph√¢n t√≠ch m·∫°ng l∆∞·ªõi Ph√∫ Qu·ªëc
    """
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file network
    net_file = "../PhuQuoc/phuquoc.net.xml"
    
    if not os.path.exists(net_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file network: {net_file}")
        return None
    
    analyzer = IntersectionAnalyzer(net_file)
    return analyzer.generate_intersection_config("intersection_config.json")


if __name__ == "__main__":
    # Ch·∫°y ph√¢n t√≠ch m·∫°ng l∆∞·ªõi Ph√∫ Qu·ªëc
    analyze_phuquoc_network()
