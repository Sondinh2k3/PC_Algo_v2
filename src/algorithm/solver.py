"""
Module gi·∫£i b√†i to√°n t·ªëi ∆∞u h√≥a ph√¢n b·ªï th·ªùi gian ƒë√®n xanh.
S·ª≠ d·ª•ng PySCIPOpt ƒë·ªÉ gi·∫£i b√†i to√°n MIQP (Mixed-Integer Quadratic Programming) phi tuy·∫øn.
MODIFIED: H·ªó tr·ª£ c·∫•u tr√∫c pha linh ho·∫°t (1 pha ch√≠nh, nhi·ªÅu pha ph·ª•).
"""

from pyscipopt import Model, quicksum
from pyscipopt.recipes.nonlinear import set_nonlinear_objective
from typing import Dict, Optional

from algorithm.common import SolverStatus
from data.intersection_config_manager import IntersectionConfigManager

def solve_green_time_optimization(
    target_inflow: float, # qg: veh/h duoc tinh toan boi bo dieu khien PC
    config_manager: IntersectionConfigManager, # cac du lieu lien quan den nut giao
    previous_green_times: Dict, # Thong tin thoi gian xanh cua chu ky truoc
    live_queue_lengths: Optional[Dict] = None
) -> Optional[Dict]:
    """
    Gi·∫£i b√†i to√°n t·ªëi ∆∞u h√≥a ƒë·ªÉ ph√¢n b·ªï l∆∞u l∆∞·ª£ng m·ª•c ti√™u (qg) th√†nh th·ªùi gian ƒë√®n xanh
    h·ªó tr·ª£ nhi·ªÅu pha ph·ª• v√† s·ª≠ d·ª•ng h√†ng ƒë·ª£i tr·ª±c ti·∫øp.

    Args:
        target_inflow: L∆∞u l∆∞·ª£ng v√†o m·ª•c ti√™u qg(k) [xe/gi·ªù].
        config_manager: ƒê·ªëi t∆∞·ª£ng qu·∫£n l√Ω c·∫•u h√¨nh intersection.
        previous_green_times: Dict ch·ª©a th·ªùi gian xanh c·ªßa chu k·ª≥ tr∆∞·ªõc.
        live_queue_lengths: Dict ch·ª©a ƒë·ªô d√†i h√†ng ƒë·ª£i th·ª±c t·∫ø t·ª´ m√¥ ph·ªèng.

    Returns:
        M·ªôt dict ch·ª©a k·∫øt qu·∫£ n·∫øu t√¨m th·∫•y nghi·ªám t·ªëi ∆∞u, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
    """
    global_params = config_manager.get_global_params()
    intersection_ids = config_manager.get_intersection_ids()

    cycle_length = global_params.get('default_cycle_length', 90)
    qg_prime = target_inflow * cycle_length / 3600.0
    
    print(f"üîß Gi·∫£i b√†i to√°n MIQP v·ªõi m·ª•c ti√™u qg = {target_inflow:.2f} [xe/gi·ªù]")
    print(f"   (T∆∞∆°ng ƒë∆∞∆°ng {qg_prime:.2f} [xe / chu k·ª≥ ƒë√®n {cycle_length}s])")

    model = Model("MIQP_PerimeterControl_MultiPhase")

    theta_1 = global_params.get('theta_1', 1.0)
    theta_2 = global_params.get('theta_2', 0.5)
    min_green = global_params.get('min_green_time', 15)
    max_change = global_params.get('max_change', 10)

    G_vars = {}
    for int_id in intersection_ids:
        G_vars[int_id] = {'p': None, 's': {}}
        # max_green for each intersection can be different based on its cycle length
        int_max_green = config_manager.get_cycle_length(int_id) - min_green
        phase_info = config_manager.get_phase_info(int_id)

        # T·∫°o bi·∫øn cho pha ch√≠nh (primary)
        G_p = model.addVar(f'G_{int_id}_p', vtype='INTEGER', lb=min_green, ub=int_max_green)
        G_vars[int_id]['p'] = G_p

        # T·∫°o bi·∫øn cho c√°c pha ph·ª• (secondary)
        if phase_info and 's' in phase_info:
            for i, _ in enumerate(phase_info['s']):
                G_s = model.addVar(f'G_{int_id}_s_{i}', vtype='INTEGER', lb=min_green, ub=int_max_green)
                G_vars[int_id]['s'][i] = G_s

    # X√°c ƒë·ªãnh ƒë·ªô d√†i h√†ng ƒë·ª£i s·∫Ω s·ª≠ d·ª•ng (tr·ª±c ti·∫øp ho·∫∑c t·ª´ config)
    queue_lengths_to_use = {}
    for int_id in intersection_ids:
        phase_info = config_manager.get_phase_info(int_id)
        queue_lengths_to_use[int_id] = {'p': 0, 's': []}
        
        # Pha ch√≠nh
        if live_queue_lengths and int_id in live_queue_lengths:
            queue_lengths_to_use[int_id]['p'] = live_queue_lengths[int_id]['p']
        else:
            queue_lengths_to_use[int_id]['p'] = phase_info['p']['queue_length']
            
        # Pha ph·ª•
        if 's' in phase_info:
            for i, phase in enumerate(phase_info['s']):
                if live_queue_lengths and int_id in live_queue_lengths and i < len(live_queue_lengths[int_id]['s']):
                    queue_lengths_to_use[int_id]['s'].append(live_queue_lengths[int_id]['s'][i])
                else:
                    queue_lengths_to_use[int_id]['s'].append(phase['queue_length'])

    # Th√™m r√†ng bu·ªôc
    for int_id in intersection_ids:
        phase_info = config_manager.get_phase_info(int_id)
        current_cycle = config_manager.get_cycle_length(int_id)

        # R√†ng bu·ªôc 1: T·ªïng th·ªùi gian xanh = chu k·ª≥ ƒë√®n
        secondary_phases_sum = quicksum(G_vars[int_id]['s'][i] for i in G_vars[int_id]['s'])
        model.addCons(G_vars[int_id]['p'] + secondary_phases_sum == current_cycle, f"cons_cycle_{int_id}")

        # R√†ng bu·ªôc 2: Gi·ªõi h·∫°n thay ƒë·ªïi so v·ªõi chu k·ª≥ tr∆∞·ªõc
        prev_p = previous_green_times[int_id]['p']
        model.addCons(G_vars[int_id]['p'] >= prev_p - max_change, f"cons_G_p_min_{int_id}")
        model.addCons(G_vars[int_id]['p'] <= prev_p + max_change, f"cons_G_p_max_{int_id}")
        print(f"  Intersection {int_id} - Main Phase (p): Previous={prev_p}, Bounds=[{prev_p - max_change}, {prev_p + max_change}], Var_Bounds=[{min_green}, {int_max_green}]")

        if phase_info and 's' in phase_info:
            for i, _ in enumerate(phase_info['s']):
                prev_s = previous_green_times[int_id]['s'][i]
                model.addCons(G_vars[int_id]['s'][i] >= prev_s - max_change, f"cons_G_s{i}_min_{int_id}")
                model.addCons(G_vars[int_id]['s'][i] <= prev_s + max_change, f"cons_G_s{i}_max_{int_id}")
                print(f"  Intersection {int_id} - Secondary Phase (s{i}): Previous={prev_s}, Bounds=[{prev_s - max_change}, {prev_s + max_change}], Var_Bounds=[{min_green}, {int_max_green}]")

    # X√¢y d·ª±ng h√†m m·ª•c ti√™u phi tuy·∫øn
    # Th√†nh ph·∫ßn 1: T·ªëi thi·ªÉu h√≥a ƒë·ªô l·ªách so v·ªõi l∆∞u l∆∞·ª£ng m·ª•c ti√™u (ch·ªâ t√≠nh tr√™n pha ch√≠nh)
    inflow_expr = quicksum(
        G_vars[int_id]['p'] * config_manager.get_phase_info(int_id)['p']['saturation_flow'] * config_manager.get_phase_info(int_id)['p']['turn_in_ratio']
        for int_id in intersection_ids
    )
    deviation = inflow_expr - qg_prime
    first_component = theta_1 * (deviation**2)

    # Th√†nh ph·∫ßn 2: T·ªëi ƒëa h√≥a vi·ªác s·ª≠ d·ª•ng ƒë√®n xanh (t·ªëi thi·ªÉu h√≥a l√£ng ph√≠)
    utilization_expr = quicksum(
        # L√£ng ph√≠ c·ªßa pha ch√≠nh
        (1 - (G_vars[int_id]['p'] * config_manager.get_phase_info(int_id)['p']['saturation_flow']) / 
            (queue_lengths_to_use[int_id]['p'] + 1))**2 +
        # T·ªïng l√£ng ph√≠ c·ªßa c√°c pha ph·ª•
        quicksum(
            (1 - (G_vars[int_id]['s'][i] * phase['saturation_flow']) / (queue_lengths_to_use[int_id]['s'][i] + 1))**2
            for i, phase in enumerate(config_manager.get_phase_info(int_id)['s'])
        )
        for int_id in intersection_ids
    )
    second_component = theta_2 * utilization_expr

    set_nonlinear_objective(model, first_component + second_component, "minimize")

    model.hideOutput()
    model.optimize()

    if model.getStatus() == "optimal":
        print(f"  T√¨m ƒë∆∞·ª£c nghi·ªám t·ªëi ∆∞u: {model.getStatus()}")
        result = {
            'status': SolverStatus.OPTIMAL,
            'objective_value': model.getObjVal(),
            'variables': {var.name: model.getVal(var) for var in model.getVars()}
        }
        return result
    else:
        print(f"  Kh√¥ng t√¨m ƒë∆∞·ª£c nghi·ªám: {model.getStatus()}")
        return None